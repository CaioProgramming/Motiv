apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {

    compileSdkVersion 30
    buildToolsVersion '26.0.3'

    def versionPropsFile = file('version.properties')
    Properties versionProps = new Properties()

    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }

    def versionMajor = versionProps['MAJOR_VERSION'].toInteger()
    def versionMinor = versionProps['MINOR_VERSION'].toInteger()
    def versionPatch = versionProps['VERSION_PATCH'].toInteger()
    def versionBuild = versionProps['VERSION_BUILD'].toInteger()
    def versionNumber = versionProps['VERSION_NUMBER'].toInteger()
    def vName = "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"


    defaultConfig {
        renderscriptSupportModeEnabled true
        applicationId "com.creat.motiv"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode versionNumber
        versionName vName
        renderscriptTargetApi 19
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string",  "feed_advertisement_id", "ca-app-pub-3940256099942544/2247696110")
            resValue("string", "video_advertisement_id", "ca-app-pub-3940256099942544/5224354917")
            resValue("string","actual_version",vName + "(debug)")

        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string","actual_version",vName + "(release)")
            resValue("string", "feed_advertisement_id", "ca-app-pub-8016530757684172/3873976887")
            resValue("string", "video_advertisement_id", "ca-app-pub-8016530757684172/4401117155")
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        dataBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':base')
    implementation project(':manager')
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation "com.github.skydoves:balloon:1.2.7"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'com.airbnb.android:lottie:3.4.0'

    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    kapt 'com.android.databinding:compiler:3.1.4'
}
repositories {
    mavenCentral()
}


task updateVersion(dependsOn: "getReleaseBundle") {
    doLast {
        println "Updating version"

        def versionPropsFile = file("version.properties")
        Properties versionProps = new Properties()
        if (versionPropsFile.canRead()) {
            versionProps.load(new FileInputStream(versionPropsFile))
        }
        else {

            throw new GradleException("Could not read version.properties!")
        }
        def versionPatch = versionProps["VERSION_PATCH"].toInteger() + 1
        def versionBuild = versionProps["VERSION_BUILD"].toInteger() + 1
        def versionNumber = versionProps["VERSION_NUMBER"].toInteger() + 1
        versionProps["VERSION_PATCH"] = versionPatch.toString()
        versionProps["VERSION_BUILD"] = versionBuild.toString()
        versionProps["VERSION_NUMBER"] = versionNumber.toString()
        versionPropsFile.withWriter { versionProps.store(it, null) }
    }

}

task generateProduction(dependsOn: "bundleRelease") {
    println "Deploying new app version"

    def versionPropsFile = file("version.properties")
    Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))

    def versionPatch = versionProps["VERSION_PATCH"].toInteger()
    def versionBuild = versionProps["VERSION_BUILD"].toInteger()
    def versionNumber = versionProps["VERSION_NUMBER"].toInteger()
    def versionMajor = versionProps['MAJOR_VERSION']
    def versionMinor = versionProps['MINOR_VERSION']

    def vName = "${versionMajor}-${versionMinor}-${versionPatch}-${versionBuild}-${versionNumber}"


    doLast {
        def destination = "C:/Users/cacai/Documents/Develop/Motiv/"
        def name = "motiv-release-${vName}.aab"
        def releaseBundle = file("release/app-release.aab")
        if (releaseBundle.exists()) {
            copy {
                from releaseBundle
                into file("${destination}")
                rename {name}
            }
            println "Generated new release bundle at $destination/$name"
        } else {
            throw new GradleException("Could not find app bundle")

        }
    }
}

task getReleaseBundle(dependsOn: "generateProduction") {
    doLast{
        def destination = "C:/Users/cacai/Documents/Develop/Motiv"
        def versionPropsFile = file("version.properties")
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def versionPatch = versionProps["VERSION_PATCH"]
        def versionBuild = versionProps["VERSION_BUILD"]
        def versionNumber = versionProps["VERSION_NUMBER"]
        def versionMajor = versionProps['MAJOR_VERSION']
        def versionMinor = versionProps['MINOR_VERSION']

        def vName = "${versionMajor}-${versionMinor}-${versionPatch}-${versionBuild}-${versionNumber}"

        def name = "motiv-release-${vName}.aab"
        def rls = file("${destination}")

        if (rls.exists()) {
            def os = org.gradle.internal.os.OperatingSystem.current()
            if (os.isWindows()) {
                exec { commandLine 'cmd', '/c', "start $rls.path" }
            } else if (os.isMacOsX()) {
                exec { commandLine 'open', "$path" }
            }
            println "Apk located on -> $rls.absolutePath/$name"
            println "Deploy successful -> version $vName"
        } else {
            throw new GradleException("Could not find app bundle on $destination/$name")
        }
    }

}






