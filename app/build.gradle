apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    compileSdkVersion 30
    buildToolsVersion '26.0.3'

    def versionPropsFile = file('version.properties')
    Properties versionProps = new Properties()

    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }

    def versionMajor = versionProps['MAJOR_VERSION']
    def versionMinor = versionProps['MINOR_VERSION']
    def versionPatch = versionProps['VERSION_PATCH'].toInteger()
    def versionBuild = versionProps['VERSION_BUILD'].toInteger()
    def versionNumber = versionProps['VERSION_NUMBER'].toInteger()
    def vName = "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"


    defaultConfig {
        renderscriptSupportModeEnabled true
        applicationId "com.creat.motiv"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode versionNumber
        versionName vName
        renderscriptTargetApi 19
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string",  "feed_advertisement_id", "ca-app-pub-3940256099942544/2247696110")
            resValue("string", "video_advertisement_id", "ca-app-pub-3940256099942544/5224354917")
            resValue("string","actual_version",vName + "(debug)")

        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string","actual_version",vName + "(release)")
            resValue("string", "feed_advertisement_id", "ca-app-pub-8016530757684172/3873976887")
            resValue("string", "video_advertisement_id", "ca-app-pub-8016530757684172/4401117155")
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        dataBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }


}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.3.0-beta01'
    implementation 'com.google.android.play:core:1.9.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2-native-mt'



    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.2'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.2'
    implementation 'com.github.mcginty:material-colors:1.1.0'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.4.20'
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"
    implementation "androidx.fragment:fragment-ktx:1.2.5"
    implementation 'com.github.mcginty:material-colors:1.1.0'

    //Firebase libs
    //implementation 'com.google.firebase:firebase-admin:6.4.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.4.2-native-mt'
    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:25.12.0')
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-database-ktx'
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.firebaseui:firebase-ui-auth:4.3.1'
    implementation 'com.google.firebase:firebase-appindexing:19.1.0'
    implementation 'com.google.firebase:firebase-auth:20.0.1'
    implementation 'com.google.firebase:firebase-database:19.6.0'
    implementation 'com.firebaseui:firebase-ui-database:2.1.0'
    implementation 'com.google.firebase:firebase-storage:19.2.1'
    implementation 'com.google.firebase:firebase-core:18.0.0'
    implementation 'com.google.firebase:firebase-messaging:21.0.1'
    implementation 'com.google.android.gms:play-services-ads:19.6.0'
    implementation 'com.facebook.android:facebook-android-sdk:8.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.20'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.pes.materialcolorpicker:library:1.2.4'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'com.github.mmin18:realtimeblurview:1.1.2'
    implementation 'com.github.devendroid:ReadMoreOption:1.0.2'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.facebook.shimmer:shimmer:0.5.0'
    implementation 'cat.ereza:customactivityoncrash:2.3.0'
    implementation 'com.opensooq.supernova:gligar:1.1.0'
    implementation 'gun0912.ted:tedbottompicker:2.0.1'
    implementation 'gun0912.ted:tedpermission-rx2:2.2.3'
    implementation 'com.github.veeyaarVR:SuperGradientTextView:1.1'
    implementation 'com.airbnb.android:lottie:3.4.0'
    implementation "com.github.skydoves:balloon:1.2.7"

    kapt 'com.android.databinding:compiler:3.1.4'


    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}
repositories {
    mavenCentral()
}
apply plugin: 'com.google.gms.google-services'


task updateVersion(dependsOn: "getReleaseBundle") {

    doLast {
        def versionPropsFile = file("version.properties")
        Properties versionProps = new Properties()
        println "Updating version"
        if (versionPropsFile.canRead()) {
            versionProps.load(new FileInputStream(versionPropsFile))
        }
        else {

            throw new GradleException("Could not read version.properties!")
        }
        def versionPatch = versionProps["VERSION_PATCH"].toInteger() + 1
        def versionBuild = versionProps["VERSION_BUILD"].toInteger() + 1
        def versionNumber = versionProps["VERSION_NUMBER"].toInteger() + 1
        versionProps["VERSION_PATCH"] = versionPatch.toString()
        versionProps["VERSION_BUILD"] = versionBuild.toString()
        versionProps["VERSION_NUMBER"] = versionNumber.toString()
        versionPropsFile.withWriter { versionProps.store(it, null) }
    }
}

task generateProduction(dependsOn: "bundleRelease") {
    println "Deploying new app version"

    def versionPropsFile = file("version.properties")
    Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))

    def versionPatch = versionProps["VERSION_PATCH"].toInteger()
    def versionBuild = versionProps["VERSION_BUILD"].toInteger()
    def versionNumber = versionProps["VERSION_NUMBER"].toInteger()
    def versionMajor = versionProps['MAJOR_VERSION']
    def versionMinor = versionProps['MINOR_VERSION']

    def vName = "${versionMajor}_${versionMinor}_${versionPatch}_${versionBuild}_${versionNumber}"


    doLast {
        def destination = "C:/Users/cacai/Documents/Develop/Motiv/"
        def name = "motiv-release-${vName}.aab"
        def releaseBundle = file("release/app-release.aab")
        if (releaseBundle.exists()) {
            copy {
                from releaseBundle
                into file("${destination}")
                rename {name}
            }
            println "Generated new release bundle at $destination/$name"
        } else {
            throw new GradleException("Could not find app bundle")

        }
    }
}

task getReleaseBundle(dependsOn: "generateProduction") {

    doLast{
        def destination = "C:/Users/cacai/Documents/Develop/Motiv"
        def versionPropsFile = file("version.properties")
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def versionPatch = versionProps["VERSION_PATCH"]
        def versionBuild = versionProps["VERSION_BUILD"]
        def versionNumber = versionProps["VERSION_NUMBER"]
        def versionMajor = versionProps['MAJOR_VERSION']
        def versionMinor = versionProps['MINOR_VERSION']

        def vName = "${versionMajor}_${versionMinor}_${versionPatch}_${versionBuild}_${versionNumber}"


        def name = "motiv-release-${vName}.aab"
        def rls = file("${destination}")

        if (rls.exists()) {
            def os = org.gradle.internal.os.OperatingSystem.current()
            if (os.isWindows()) {
                exec { commandLine 'cmd', '/c', "start $rls.path" }
            } else if (os.isMacOsX()) {
                exec { commandLine 'open', "$path" }
            }
            println "Apk located on -> $rls.absolutePath/$name"
            println "Deploy successful -> version $vName"
        } else {
            throw new GradleException("Could not find app bundle on $destination/$name")
        }
    }

}






