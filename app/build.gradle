plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}


android {

    namespace 'com.creat.motiv'
    compileSdk 33

    def versionPropsFile = file('version.properties')
    Properties versionProps = new Properties()

    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    def versionMajor = versionProps['VERSION_MAJOR'].toInteger()
    def versionMinor = versionProps['VERSION_MINOR'].toInteger()
    def versionPatch = versionProps['VERSION_PATCH'].toInteger()
    def versionBuild = versionProps['VERSION_BUILD'].toInteger()
    def versionNumber = versionProps['VERSION_NUMBER'].toInteger()
    def vName = "Motiv.${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"


    defaultConfig {
        renderscriptSupportModeEnabled true
        applicationId "com.creat.motiv"
        minSdk 26
        targetSdk 33
        versionCode versionNumber
        versionName vName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string","actual_version",vName + "(debug)")

        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string", "actual_version", vName + "(release)")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/*.kotlin_module']
        }
    }


}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':base')
    implementation project(':manager')
    implementation('androidx.palette:palette-ktx:1.0.0')
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
}

task updateVersion {
    doLast {
        println "Updating version"

        def versionPropsFile = file("version.properties")
        Properties versionProps = new Properties()
        if (versionPropsFile.canRead()) {
            versionProps.load(new FileInputStream(versionPropsFile))
        }
        else {

            throw new GradleException("Could not read version.properties!")
        }

        def versionMajor = versionProps["VERSION_MAJOR"].toInteger()
        def versionMinor = versionProps["VERSION_MINOR"].toInteger()
        def versionPatch = versionProps["VERSION_PATCH"].toInteger()
        def versionBuild = versionProps["VERSION_BUILD"].toInteger()
        def versionNumber = versionProps["VERSION_NUMBER"].toInteger() + 1

        if (versionBuild < 20) {
            versionBuild++
        } else {
            versionBuild = 0
            if (versionPatch < 10) {
                versionPatch++
            } else {
                versionPatch = 0
                if (versionMinor < 15) {
                    versionMinor++
                } else {
                    versionMinor = 0
                    versionMajor++
                }
            }
        }

        versionProps["VERSION_NUMBER"] = versionNumber.toString()
        versionProps["VERSION_MAJOR"] = versionMajor.toString()
        versionProps["VERSION_MINOR"] = versionMinor.toString()
        versionProps["VERSION_PATCH"] = versionPatch.toString()
        versionProps["VERSION_BUILD"] = versionBuild.toString()

        versionPropsFile.withWriter { versionProps.store(it, null) }

        println "New version $versionNumber -> $versionMajor.$versionMinor.$versionPatch.$versionBuild"
    }

}








