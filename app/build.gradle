apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {

    compileSdkVersion 31
    buildToolsVersion '26.0.3'

    def versionPropsFile = file('version.properties')
    Properties versionProps = new Properties()

    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }

    def versionMajor = versionProps['VERSION_MAJOR'].toInteger()
    def versionMinor = versionProps['VERSION_MINOR'].toInteger()
    def versionPatch = versionProps['VERSION_PATCH'].toInteger()
    def versionBuild = versionProps['VERSION_BUILD'].toInteger()
    def versionNumber = versionProps['VERSION_NUMBER'].toInteger()
    def vName = "Motiv.${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"


    defaultConfig {
        renderscriptSupportModeEnabled true
        applicationId "com.creat.motiv"
        minSdkVersion 26
        targetSdkVersion 31
        versionCode versionNumber
        versionName vName
        renderscriptTargetApi 19
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string",  "feed_advertisement_id", "ca-app-pub-3940256099942544/2247696110")
            resValue("string", "video_advertisement_id", "ca-app-pub-3940256099942544/5224354917")
            resValue("string","actual_version",vName + "(debug)")

        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string","actual_version",vName + "(release)")
            resValue("string", "feed_advertisement_id", "ca-app-pub-8016530757684172/3873976887")
            resValue("string", "video_advertisement_id", "ca-app-pub-8016530757684172/4401117155")
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        viewBinding = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':base')
    implementation project(':manager')
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation "com.github.skydoves:balloon:1.2.7"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'com.airbnb.android:lottie:3.4.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
}
repositories {
    mavenCentral()
}


task updateVersion {
    doLast {
        println "Updating version"

        def versionPropsFile = file("version.properties")
        Properties versionProps = new Properties()
        if (versionPropsFile.canRead()) {
            versionProps.load(new FileInputStream(versionPropsFile))
        }
        else {

            throw new GradleException("Could not read version.properties!")
        }

        def versionMajor = versionProps["VERSION_MAJOR"].toInteger()
        def versionMinor = versionProps["VERSION_MINOR"].toInteger()
        def versionPatch = versionProps["VERSION_PATCH"].toInteger()
        def versionBuild = versionProps["VERSION_BUILD"].toInteger()
        def versionNumber = versionProps["VERSION_NUMBER"].toInteger() + 1

        if (versionBuild < 20) {
            versionBuild++
        } else {
            versionBuild = 0
            if (versionPatch < 10) {
                versionPatch++
            } else {
                versionPatch = 0
                if (versionMinor < 15) {
                    versionMinor++
                } else {
                    versionMinor = 0
                    versionMajor++
                }
            }
        }

        versionProps["VERSION_NUMBER"] = versionNumber.toString()
        versionProps["VERSION_MAJOR"] = versionMajor.toString()
        versionProps["VERSION_MINOR"] = versionMinor.toString()
        versionProps["VERSION_PATCH"] = versionPatch.toString()
        versionProps["VERSION_BUILD"] = versionBuild.toString()

        versionPropsFile.withWriter { versionProps.store(it, null) }
    }

}








